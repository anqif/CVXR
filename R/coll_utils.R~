#### #' Create a vec using a list
#### #' @return a list that provides a vector as well as a deque
make_vec <- function() {
  vec <- vector(mode = "list", length = 128L) ## initial length of 128!
  n <- 0L
  push_back <- function(what) { n <<- n + 1L; vec[[n]] <<- what; invisible(what) }
  push_front <- function(what) { vec <<- append(list(what), vec); n <<- n + 1L; invisible(what) }
  pop_back <- function() { result <- vec[[n]]; vec[[n]] <<- NULL; n <<- n - 1L; result }
  pop_front <- function() { result <- vec[[1L]]; vec <<- vec[-1]; n <<- n - 1L; result }
  get_list <- function() vec[seq_len(n)]
  size <- function() n
  list(push_back = push_back, push_front = push_front, pop_back = pop_back, pop_front = pop_front,
       get_list = get_list, size = size)
}

#### #' Create a stack using a list but unlike above access is via names
#### #' added items must have get_id method that gives a unique id for memoisation
make_stack <- function() {
  stack <- list()
  n <- 0L
  append <- function(what) { n <<- n + 1L; stack[[what$get_id()]] <<- what; invisible(what)}
  pop <- function() { result <- stack[[n]]; n <<- n - 1L; result }
  pop_front <- function() { result <- vec[[1L]]; vec <<- vec[-1]; n <<- n - 1L; result }
  get_list <- function() vec[seq_len(n)]
  size <- function() n
  list(push_back = push_back, push_front = push_front, pop_back = pop_back, pop_front = pop_front,
       get_list = get_list, size = size)
}

#### #' Create a dict using a list. Added items must have a unique id field to use for hashing
#### #' @return a list that is a dict
make_dict <- function() {
  vec <- vector(mode = "list", length = 128L) ## initial length of 128!
  n <- 0L
  add <- function(what) {
    id <- what$id
    if (!(id %in% names(vec))) {
      n <<- n + 1L;
    }
    vec[[id]] <- what
    invisible(what)
  }
  contains <- function(what) {
    what$id %in% names(vec)
  }
  get <- function(id) vec[[id]]
  size <- function() n

  list(add = add, contains = contains, get = get, size = size)
}

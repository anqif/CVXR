% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qp_solver_piqp.R
\docType{class}
\name{PIQP-class}
\alias{PIQP-class}
\alias{PIQP}
\alias{status_map,PIQP-method}
\alias{name,PIQP-method}
\alias{import_solver,PIQP-method}
\alias{invert,PIQP,list,InverseData-method}
\alias{solve_via_data,PIQP-method}
\title{QP interface for the PIQP solver.}
\usage{
PIQP()

\S4method{status_map}{PIQP}(solver, status)

\S4method{name}{PIQP}(x)

\S4method{import_solver}{PIQP}(solver)

\S4method{invert}{PIQP,list,InverseData}(object, solution, inverse_data)

\S4method{solve_via_data}{PIQP}(
  object,
  data,
  warm_start,
  verbose,
  solver_opts,
  solver_cache = NULL
)
}
\arguments{
\item{solver, object, x}{A \linkS4class{PIQP} object.}

\item{status}{A status code returned by the solver.}

\item{solution}{The raw solution returned by the solver.}

\item{inverse_data}{A \linkS4class{InverseData} object containing data necessary for the inversion.}

\item{data}{Data generated via an apply call.}

\item{warm_start}{A boolean of whether to warm start the solver.}

\item{verbose}{A boolean of whether to enable solver verbosity.}

\item{solver_opts}{A list of Solver specific options}

\item{solver_cache}{Cache for the solver.}

\item{default}{A status string to return if no status code match is found. If \code{default = NA}, this method will return an error when there is no match.}
}
\description{
QP interface for the PIQP solver.
}
\section{Methods (by generic)}{
\itemize{
\item \code{status_map(PIQP)}: Converts status returned by the PIQP solver to its respective CVXR status.

\item \code{name(PIQP)}: Returns the name of the solver.

\item \code{import_solver(PIQP)}: Imports the solver.

\item \code{invert(object = PIQP, solution = list, inverse_data = InverseData)}: Returns the solution to the original problem given the inverse_data.

\item \code{solve_via_data(PIQP)}: Solve a problem represented by data returned from apply.

}}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constraints.R
\docType{class}
\name{PowCone3D-class}
\alias{PowCone3D-class}
\alias{.PowCone3D}
\alias{PowCone3D}
\alias{as.character,PowCone3D-method}
\alias{residual,PowCone3D-method}
\alias{get_data,PowCone3D-method}
\alias{is_imag,PowCone3D-method}
\alias{is_complex,PowCone3D-method}
\alias{num_cones,PowCone3D-method}
\alias{cone_sizes,PowCone3D-method}
\alias{is_dcp,PowCone3D-method}
\alias{is_dgp,PowCone3D-method}
\alias{is_dqcp,PowCone3D-method}
\alias{dim,PowCone3D-method}
\alias{dual_value<-,PowCone3D-method}
\alias{size,SOC-method}
\title{The PowCone3D class.}
\usage{
PowCone3D(x, y, z, alpha, constr_id = NA_integer_)

\S4method{as.character}{PowCone3D}(x)

\S4method{residual}{PowCone3D}(object)

\S4method{get_data}{PowCone3D}(object)

\S4method{is_imag}{PowCone3D}(object)

\S4method{is_complex}{PowCone3D}(object)

\S4method{num_cones}{PowCone3D}(object)

\S4method{cone_sizes}{PowCone3D}(object)

\S4method{is_dcp}{PowCone3D}(object, dpp = FALSE)

\S4method{is_dgp}{PowCone3D}(object, dpp = FALSE)

\S4method{is_dqcp}{PowCone3D}(object)

\S4method{dim}{PowCone3D}(x)

\S4method{dual_value}{PowCone3D}(object) <- value

\S4method{size}{SOC}(object)
}
\arguments{
\item{x}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{x}.}

\item{y}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{y}.}

\item{z}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{z}.}

\item{alpha}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{\alpha}. Must be in the open interval (0, 1).}

\item{value}{A numeric scalar, vector, or matrix.}
}
\description{
This class represents a collection of 3D power cone constraints
}
\details{
\deqn{x[i]^alpha[i] * y[i]^(1-alpha[i]) \geq |z[i]| \text{for all} i, x \geq 0, y \geq 0}

If the parameter alpha is a scalar, it will be promoted to a vector matching
the (common) sizes of x, y, z. The numeric value of alpha (or its components,
in the vector case) must be a number in the open interval (0, 1).

We store flattened representations of the arguments (x, y, z, and alpha) as
Expression objects. We construct dual variables with respect to these
flattened representations.
}
\section{Methods (by generic)}{
\itemize{
\item \code{residual(PowCone3D)}: A \linkS4class{Expression} representing the residual of the constraint.

\item \code{get_data(PowCone3D)}: Information needed to reconstruct the object aside from the args.

\item \code{is_imag(PowCone3D)}: A logical value indicating whether the constraint is imaginary.

\item \code{is_complex(PowCone3D)}: A logical value indicating whether the constraint is complex.

\item \code{num_cones(PowCone3D)}: The number of elementwise cones.

\item \code{cone_sizes(PowCone3D)}: The dimensions of the second-order cones.

\item \code{is_dcp(PowCone3D)}: The constraint is DCP if the constrained expression is affine.

\item \code{is_dgp(PowCone3D)}: Is the constraint DGP?

\item \code{is_dqcp(PowCone3D)}: Is the constraint DQCP?

\item \code{dim(PowCone3D)}: The dimensions of the constrained expression.

\item \code{dual_value(PowCone3D) <- value}: Replaces the dual values of a second-order cone constraint.

\item \code{size(SOC)}: The number of entries in the combined cones.

}}
\section{Slots}{

\describe{
\item{\code{x}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{x}.}

\item{\code{y}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{y}.}

\item{\code{z}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{z}.}

\item{\code{alpha}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{\alpha}. Must be in the open interval (0, 1).}
}}


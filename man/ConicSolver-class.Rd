% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/283_conic_solver.R
\docType{class}
\name{ConicSolver-class}
\alias{ConicSolver-class}
\alias{ConicSolver}
\alias{ConicSolver.format_constr}
\alias{invert,ConicSolver,Solution,InverseData-method}
\alias{perform,ConicSolver,Problem-method}
\title{The ConicSolver class.}
\usage{
ConicSolver.format_constr(object, problem)

\S4method{invert}{ConicSolver,Solution,InverseData}(object, solution, inverse_data)

\S4method{perform}{ConicSolver,Problem}(object, problem)
}
\arguments{
\item{object}{the solver object}

\item{problem}{a \code{ParamConeProb} object that is problem that is the provenance of the constraint}

\item{solution}{A \linkS4class{Solution} object to invert.}

\item{inverse_data}{A \linkS4class{InverseData} object containing data necessary for the inversion.}

\item{exp_cone_order}{a list indicating how the exponential cone arguments are ordered}
}
\value{
a \code{ParamConeProg} with structured A.
}
\description{
Conic solver class with reduction semantics.
}
\details{
The \code{ParamConeProg} will have problem data tensors that will yield the
coefficient \code{A} and offset \code{b} for the constraint in the following formats:
\itemize{
\item Linear equations: \verb{(A, b)} such that \code{A * x + b == 0},
\item Linear inequalities: \verb{(A, b)} such that \code{A * x + b >= 0},
\item Second order cone: \verb{(A, b)} such that \code{A * x + b} in SOC,
\item Exponential cone: \verb{(A, b)} such that \code{A * x + b} in EXP,
\item Semidefinite cone: \verb{(A, b)} such that \code{A * x + b} in PSD,
The \code{CVXR} standard for the exponential cone is:
K_e = closure{(x,y,z) |  z >= y * exp(x/y), y>0}.
Whenever a solver uses this convention, exp_cone_order should be
\link{0, 1, 2}.
The \code{CVXR} standard for the second order cone is:
SOC(n) = { x : x\link{0} >= norm(x\link{1:n}, 2)  }.
All currently supported solvers use this convention.
Args:
}
}
\section{Methods (by generic)}{
\itemize{
\item \code{invert(object = ConicSolver, solution = Solution, inverse_data = InverseData)}: Returns the solution to the original problem given the inverse_data.

\item \code{perform(object = ConicSolver, problem = Problem)}: Return problem data and data for inverting the solution

}}
\section{Functions}{
\itemize{
\item \code{ConicSolver.format_constr()}: Return a list representing a cone program whose problem data tensors

}}

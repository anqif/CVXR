% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/136_indicator.R
\docType{class}
\name{Indicator-class}
\alias{Indicator-class}
\alias{.Indicator}
\alias{Indicator}
\alias{is_constant,Indicator-method}
\alias{is_convex,Indicator-method}
\alias{is_concave,Indicator-method}
\alias{is_log_log_convex,Indicator-method}
\alias{is_log_log_concave,Indicator-method}
\alias{is_nonneg,Indicator-method}
\alias{is_nonpos,Indicator-method}
\alias{is_imag,Indicator-method}
\alias{is_complex,Indicator-method}
\alias{get_data,Indicator-method}
\alias{dim,Indicator-method}
\alias{name,Indicator-method}
\alias{domain,Indicator-method}
\alias{value,Indicator-method}
\alias{grad,Indicator-method}
\title{The Indicator class.}
\usage{
\S4method{is_constant}{Indicator}(object)

\S4method{is_convex}{Indicator}(object)

\S4method{is_concave}{Indicator}(object)

\S4method{is_log_log_convex}{Indicator}(object)

\S4method{is_log_log_concave}{Indicator}(object)

\S4method{is_nonneg}{Indicator}(object)

\S4method{is_nonpos}{Indicator}(object)

\S4method{is_imag}{Indicator}(object)

\S4method{is_complex}{Indicator}(object)

\S4method{get_data}{Indicator}(object)

\S4method{dim}{Indicator}(x)

\S4method{name}{Indicator}(x)

\S4method{domain}{Indicator}(object)

\S4method{value}{Indicator}(object)

\S4method{grad}{Indicator}(object)
}
\description{
An expression representing the convex function I(constraints) = 0 if constraints hold, and +Inf otherwise.
}
\section{Methods (by generic)}{
\itemize{
\item \code{is_constant(Indicator)}: Expression is constant if all constraints have constant args.

\item \code{is_convex(Indicator)}: Is the expression convex?

\item \code{is_concave(Indicator)}: Is the expression concave?

\item \code{is_log_log_convex(Indicator)}: Is the expression log-log convex?

\item \code{is_log_log_concave(Indicator)}: Is the expression log-log concave?

\item \code{is_nonneg(Indicator)}: Is the expression positive?

\item \code{is_nonpos(Indicator)}: Is the expression negative?

\item \code{is_imag(Indicator)}: Is the expression imaginary?

\item \code{is_complex(Indicator)}: Is the expression complex valued?

\item \code{get_data(Indicator)}: Returns information needed to reconstruct the expression besides the args.

\item \code{dim(Indicator)}: Returns the (row, col) dimensions of the expression.

\item \code{name(Indicator)}: Returns the string representation of the expression.

\item \code{domain(Indicator)}: A list of constraints describe the closure of the region where the expression is finite.

\item \code{value(Indicator)}: Returns the numeric value of the expression.

\item \code{grad(Indicator)}: Gives the (sub/super)gradient of the expression wrt each variable. Matrix expressions are vectorized, so the gradient is a matrix. NA indicates variable values unknown or outside domain.

}}
\section{Slots}{

\describe{
\item{\code{constraints}}{A list of \linkS4class{Constraint}s.}

\item{\code{err_tol}}{A numeric tolerance for determing whether the constraints hold.}
}}


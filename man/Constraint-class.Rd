% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constraints.R
\docType{class}
\name{Constraint-class}
\alias{Constraint-class}
\alias{Constraint}
\alias{as.character,Constraint-method}
\alias{dim,Constraint-method}
\alias{size,Constraint-method}
\alias{is_real,Constraint-method}
\alias{is_imag,Constraint-method}
\alias{is_complex,Constraint-method}
\alias{is_dcp,Constraint-method}
\alias{is_dgp,Constraint-method}
\alias{is_dpp,Constraint-method}
\alias{residual,Constraint-method}
\alias{violation,Constraint-method}
\alias{constr_value,Constraint-method}
\alias{get_data,Constraint-method}
\alias{dual_value,Constraint-method}
\alias{dual_value<-,Constraint-method}
\alias{size,ZeroConstraint-method}
\alias{is_dpp,IneqConstraint-method}
\title{The Constraint class.}
\usage{
\S4method{as.character}{Constraint}(x)

\S4method{dim}{Constraint}(x)

\S4method{size}{Constraint}(object)

\S4method{is_real}{Constraint}(object)

\S4method{is_imag}{Constraint}(object)

\S4method{is_complex}{Constraint}(object)

\S4method{is_dcp}{Constraint}(object, dpp = FALSE)

\S4method{is_dgp}{Constraint}(object, dpp = FALSE)

\S4method{is_dpp}{Constraint}(object, context = "dcp")

\S4method{residual}{Constraint}(object)

\S4method{violation}{Constraint}(object)

\S4method{constr_value}{Constraint}(object, tolerance = 1e-08)

\S4method{get_data}{Constraint}(object)

\S4method{dual_value}{Constraint}(object)

\S4method{dual_value}{Constraint}(object) <- value

\S4method{size}{ZeroConstraint}(object)

\S4method{is_dpp}{IneqConstraint}(object, context = "dcp")
}
\arguments{
\item{x, object}{A \linkS4class{Constraint} object.}

\item{dpp}{A logical value indicating whether we are solving a disciplined parameterized program (DPP).}

\item{context}{Must be either 'dcp' (disciplined convex program) or 'dgp' (disciplined geometric program).}

\item{tolerance}{The tolerance for checking if the constraint is violated.}

\item{value}{A numeric scalar, vector, or matrix.}
}
\description{
This virtual class represents a mathematical constraint.
}
\section{Methods (by generic)}{
\itemize{
\item \code{dim(Constraint)}: The dimensions of the constrained expression.

\item \code{size(Constraint)}: The size of the constrained expression.

\item \code{is_real(Constraint)}: Is the constraint real?

\item \code{is_imag(Constraint)}: Is the constraint imaginary?

\item \code{is_complex(Constraint)}: Is the constraint complex?

\item \code{is_dcp(Constraint)}: Is the constraint DCP?

\item \code{is_dgp(Constraint)}: Is the constraint DGP?

\item \code{is_dpp(Constraint)}: is the constraint DPP in the given context?

\item \code{residual(Constraint)}: The residual of a constraint

\item \code{violation(Constraint)}: The numeric residual of a constraint. The violation is defined as the
distance between the constrained expression's value and its projection onto the domain of the
constraint: ||\\Pi(v) - v||_2^2, where \code{v} is the value of the constrained expression and
\verb{\\\\Pi} is the projection operator onto the constraint's domain.

\item \code{constr_value(Constraint)}: Checks whether the constraint violation is less than a tolerance.

\item \code{get_data(Constraint)}: Information needed to reconstruct the object aside from the args.

\item \code{dual_value(Constraint)}: The dual values of a constraint.

\item \code{dual_value(Constraint) <- value}: Replaces the dual values of a constraint.

\item \code{size(ZeroConstraint)}: The size of the constrained expression.

\item \code{is_dpp(IneqConstraint)}: is the constraint DPP in the given context?

}}

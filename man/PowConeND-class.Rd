% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/153_power.R
\docType{class}
\name{PowConeND-class}
\alias{PowConeND-class}
\alias{.PowConeND}
\alias{PowConeND}
\alias{as.character,PowConeND-method}
\alias{is_imag,PowConeND-method}
\alias{is_complex,PowConeND-method}
\alias{get_data,PowConeND-method}
\alias{residual,PowConeND-method}
\alias{num_cones,PowConeND-method}
\alias{size,PowConeND-method}
\alias{cone_sizes,PowConeND-method}
\alias{is_dcp,PowConeND-method}
\alias{is_dgp,PowConeND-method}
\alias{is_dqcp,PowConeND-method}
\alias{dual_value<-,PowConeND-method}
\title{The PowConeND class.}
\usage{
PowConeND(W, z, alpha, axis = 2, constr_id = NA_integer_)

\S4method{as.character}{PowConeND}(x)

\S4method{is_imag}{PowConeND}(object)

\S4method{is_complex}{PowConeND}(object)

\S4method{get_data}{PowConeND}(object)

\S4method{residual}{PowConeND}(object)

\S4method{num_cones}{PowConeND}(object)

\S4method{size}{PowConeND}(object)

\S4method{cone_sizes}{PowConeND}(object)

\S4method{is_dcp}{PowConeND}(object, dpp = FALSE)

\S4method{is_dgp}{PowConeND}(object, dpp = FALSE)

\S4method{is_dqcp}{PowConeND}(object)

\S4method{dual_value}{PowConeND}(object) <- value
}
\arguments{
\item{W}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{W}.}

\item{z}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{z}.}

\item{alpha}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{\alpha}. Must be in the open interval (0, 1).}

\item{axis}{The dimension along which to constrain: \code{1} indicates rows, and \code{2} indicates columns. The default is \code{2}.}

\item{value}{A numeric scalar, vector, or matrix.}
}
\description{
This class represents a collection of N-dimensional power cone constraints
that is mathematically equivalent to the following code snippet:
}
\details{
\code{apply(W^alpha, axis, prod) >= abs(z)},
W >= 0

All arguments must be Expression-like, and z must satisfy ndim(z) <= 1. The
rows (resp. columns) of alpha must sum to 1 when axis = 1 (resp. axis = 2).

Note: unlike PowCone3D, we make no attempt to promote alpha to the
appropriate shape. The dimensions of W and alpha must match exactly.

Note: Dual variables are not currently implemented for this type of constraint.
}
\section{Methods (by generic)}{
\itemize{
\item \code{is_imag(PowConeND)}: A logical value indicating whether the constraint is imaginary.

\item \code{is_complex(PowConeND)}: A logical value indicating whether the constraint is complex.

\item \code{get_data(PowConeND)}: Information needed to reconstruct the object aside from the args.

\item \code{residual(PowConeND)}: A \linkS4class{Expression} representing the residual of the constraint.

\item \code{num_cones(PowConeND)}: The number of elementwise cones.

\item \code{size(PowConeND)}: The number of entries in the combined cones.

\item \code{cone_sizes(PowConeND)}: The dimensions of the second-order cones.

\item \code{is_dcp(PowConeND)}: The constraint is DCP if the constrained expression is affine.

\item \code{is_dgp(PowConeND)}: Is the constraint DGP?

\item \code{is_dqcp(PowConeND)}: Is the constraint DQCP?

\item \code{dual_value(PowConeND) <- value}: Replaces the dual values of a second-order cone constraint.

}}
\section{Slots}{

\describe{
\item{\code{W}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{W}.}

\item{\code{z}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{z}.}

\item{\code{alpha}}{An \linkS4class{Expression}, numeric element, vector, or matrix representing \eqn{\alpha}. Must be in the open interval (0, 1).}

\item{\code{axis}}{The dimension along which to constrain: \code{1} indicates rows, and \code{2} indicates columns. The default is \code{2}.}
}}


% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constraints.R
\docType{class}
\name{FiniteSet-class}
\alias{FiniteSet-class}
\alias{.FiniteSet}
\alias{FiniteSet}
\alias{name,FiniteSet-method}
\alias{get_data,FiniteSet-method}
\alias{is_dcp,FiniteSet-method}
\alias{is_dgp,FiniteSet-method}
\alias{is_dqcp,FiniteSet-method}
\alias{size,FiniteSet-method}
\alias{residual,FiniteSet-method}
\title{The FiniteSet class.}
\usage{
FiniteSet(expre, vec, ineq_form = FALSE, constr_id = NA_integer_)

\S4method{name}{FiniteSet}(x)

\S4method{get_data}{FiniteSet}(object)

\S4method{is_dcp}{FiniteSet}(object, dpp = FALSE)

\S4method{is_dgp}{FiniteSet}(object, dpp = FALSE)

\S4method{is_dqcp}{FiniteSet}(object)

\S4method{size}{FiniteSet}(object)

\S4method{residual}{FiniteSet}(object)
}
\arguments{
\item{expre}{An affine Expression object.}

\item{vec}{The finite collection of values to which each entry of expre is to be constrained.}

\item{ineq_form}{A logical value controlling how this constraint is canonicalized.}

\item{constr_id}{(Optional) An integer representing the unique ID of the constraint.}

\item{x, object}{A \linkS4class{FiniteSet} object.}
}
\description{
This class represents a constraint that each entry of an Expression to take a value in a given set of real numbers.
}
\section{Methods (by generic)}{
\itemize{
\item \code{name(FiniteSet)}: The string representation of the constraint.

\item \code{get_data(FiniteSet)}: Information needed to reconstruct the object aside from the args.

\item \code{is_dcp(FiniteSet)}: The constraint is DCP if the constrained expression is affine.

\item \code{is_dgp(FiniteSet)}: Is the constraint DGP?

\item \code{is_dqcp(FiniteSet)}: Is the constraint DQCP?

\item \code{size(FiniteSet)}: The size of the constrained expression.

\item \code{residual(FiniteSet)}: The residual of the constraint.

}}
\section{Slots}{

\describe{
\item{\code{vec}}{The finite collection of values to which each entry of expre is to be constrained.}

\item{\code{ineq_form}}{A logical value controlling how this constraint is canonicalized into mixed-integer linear constraints.
If TRUE, then we use a formulation with (size(vec) - 1) inequality constraints,
one equality constraint, and (size(vec) - 1) binary variables for each element
of expre. If FALSE, then we use a formulation with size(vec) binary variables and two
equality constraints for each element of expre. Defaults to FALSE. The case ineq_form = TRUE may speed up some mixed-integer
solvers that use simple branch and bound methods.}
}}


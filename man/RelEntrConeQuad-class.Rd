% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/150_exponential.R
\docType{class}
\name{RelEntrConeQuad-class}
\alias{RelEntrConeQuad-class}
\alias{.RelEntrConeQuad}
\alias{RelEntrConeQuad}
\alias{get_data,RelEntrConeQuad-method}
\alias{as.character,RelEntrConeQuad-method}
\alias{size,RelEntrConeQuad-method}
\alias{num_cones,RelEntrConeQuad-method}
\alias{cone_sizes,RelEntrConeQuad-method}
\alias{is_dcp,RelEntrConeQuad-method}
\alias{is_dgp,RelEntrConeQuad-method}
\alias{is_dqcp,RelEntrConeQuad-method}
\alias{dual_value<-,RelEntrConeQuad-method}
\title{The RelEntrConeQuad class.}
\usage{
RelEntrConeQuad(x, y, z, m, k, constr_id = NA_integer_)

\S4method{get_data}{RelEntrConeQuad}(object)

\S4method{as.character}{RelEntrConeQuad}(x)

\S4method{size}{RelEntrConeQuad}(object)

\S4method{num_cones}{RelEntrConeQuad}(object)

\S4method{cone_sizes}{RelEntrConeQuad}(object)

\S4method{is_dcp}{RelEntrConeQuad}(object, dpp = FALSE)

\S4method{is_dgp}{RelEntrConeQuad}(object, dpp = FALSE)

\S4method{is_dqcp}{RelEntrConeQuad}(object)

\S4method{dual_value}{RelEntrConeQuad}(object) <- value
}
\arguments{
\item{x}{The variable \eqn{x} in the (approximate) scalar relative entropy cone.}

\item{y}{The variable \eqn{y} in the (approximate) scalar relative entropy cone.}

\item{z}{The variable \eqn{z} in the (approximate) scalar relative entropy cone.}

\item{m}{An integer directly related to the number of generated nodes for the quadrature approximation used in the algorithm.}

\item{k}{An integer controlling the approximation.}

\item{constr_id}{(Optional) A numeric value representing the constraint ID.}

\item{value}{A numeric scalar, vector, or matrix.}
}
\description{
This class represents an approximate construction of the scalar relative entropy cone.
}
\details{
\deqn{
 K_{re}=\\text{cl}\\{(x,y,z)\\in\\mathbb{R}_{++} \\times \\mathbb{R}_{++}\\times\\mathbb{R}_{++}\\:x\\log(x/y)\\leq z\\}
}

Since the above definition is very similar to the ExpCone, we provide a conversion method.

More details on the approximation can be found in Theorem-3 on page-10 in the paper:
Semidefinite Approximations of the Matrix Logarithm.
}
\section{Methods (by generic)}{
\itemize{
\item \code{get_data(RelEntrConeQuad)}: Information needed to reconstruct the object aside from the args.

\item \code{size(RelEntrConeQuad)}: The number of entries in the combined cones.

\item \code{num_cones(RelEntrConeQuad)}: The number of elementwise cones.

\item \code{cone_sizes(RelEntrConeQuad)}: The dimensions of the exponential cones.

\item \code{is_dcp(RelEntrConeQuad)}: An exponential constraint is DCP if each argument is affine.

\item \code{is_dgp(RelEntrConeQuad)}: Is the constraint DGP?

\item \code{is_dqcp(RelEntrConeQuad)}: Is the constraint DQCP?

\item \code{dual_value(RelEntrConeQuad) <- value}: Replaces the dual values of an exponential cone constraint.

}}
\section{Slots}{

\describe{
\item{\code{x}}{The variable \eqn{x} in the (approximate) scalar relative entropy cone.}

\item{\code{y}}{The variable \eqn{y} in the (approximate) scalar relative entropy cone.}

\item{\code{z}}{The variable \eqn{z} in the (approximate) scalar relative entropy cone.}

\item{\code{m}}{An integer directly related to the number of generated nodes for the quadrature approximation used in the algorithm.}

\item{\code{k}}{An integer controlling the approximation.}
}}


% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dqcp2dcp.R
\docType{class}
\name{Dqcp2Cone-class}
\alias{Dqcp2Cone-class}
\alias{.Dqcp2Cone}
\alias{accepts,Dqcp2Cone,Problem-method}
\alias{perform,Dqcp2Cone,Problem-method}
\alias{canon_args,Dqcp2Cone-method}
\alias{canonicalize_constraint,Dqcp2Cone-method}
\title{Reduce DQCP Problem to Parametrized DCP Problem}
\usage{
\S4method{accepts}{Dqcp2Cone,Problem}(object, problem)

\S4method{perform}{Dqcp2Cone,Problem}(object, problem)

\S4method{canon_args}{Dqcp2Cone}(object, expr)

\S4method{canonicalize_constraint}{Dqcp2Cone}(object, expr)
}
\arguments{
\item{object}{A \linkS4class{Dqcp2Cone} object.}

\item{problem}{A \linkS4class{Problem} object.}
}
\description{
This reduction takes as input a DQCP problem and returns a parameterized
DCP problem that can be solved by bisection. Some of the constraints might
be lazy, i.e., callables that return a constraint when called. The problem
will only be DCP once the lazy constraints are replaced with actual
constraints.
}
\details{
Problems emitted by this reduction can be solved with the bisect function.
}
\section{Methods (by generic)}{
\itemize{
\item \code{accepts(object = Dqcp2Cone, problem = Problem)}: A problem is accepted if it is a minimization and is DQCP.

\item \code{perform(object = Dqcp2Cone, problem = Problem)}: Recursively canonicalize the objective and every constraint.

\item \code{canon_args(Dqcp2Cone)}: Canonicalize arguments of an expression. Like canonicalize_tree, but preserves signs.

\item \code{canonicalize_constraint(Dqcp2Cone)}: Recursively canonicalize a constraint. The DQCP grammar has expressions of the form INCR QCVX DCP and DECR QCCV DCP, i.e., zero or more real/scalar increasing (or decreasing) atoms, composed with a quasiconvex (or quasiconcave) atom, composed with DCP expressions. The monotone functions are inverted by applying their inverses to both sides of a constraint. The QCVX (QCCV) atom is lowered by replacing it with its sublevel (superlevel) set. The DCP expressions are canonicalized via graph implementations.

}}

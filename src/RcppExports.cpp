// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/CVXR.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LinOp__new
SEXP LinOp__new();
RcppExport SEXP _CVXR_LinOp__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LinOp__new());
    return rcpp_result_gen;
END_RCPP
}
// LinOp__get_sparse
bool LinOp__get_sparse(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_sparse(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_sparse(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_sparse
void LinOp__set_sparse(SEXP xp, SEXP sparseSEXP);
RcppExport SEXP _CVXR_LinOp__set_sparse(SEXP xpSEXP, SEXP sparseSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sparseSEXP(sparseSEXPSEXP);
    LinOp__set_sparse(xp, sparseSEXP);
    return R_NilValue;
END_RCPP
}
// LinOp__get_sparse_data
Eigen::SparseMatrix<double> LinOp__get_sparse_data(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_sparse_data(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_sparse_data(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_sparse_data
void LinOp__set_sparse_data(SEXP xp, SEXP sparseMat);
RcppExport SEXP _CVXR_LinOp__set_sparse_data(SEXP xpSEXP, SEXP sparseMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sparseMat(sparseMatSEXP);
    LinOp__set_sparse_data(xp, sparseMat);
    return R_NilValue;
END_RCPP
}
// LinOp__get_dense_data
Eigen::MatrixXd LinOp__get_dense_data(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_dense_data(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_dense_data(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_dense_data
void LinOp__set_dense_data(SEXP xp, SEXP denseMat);
RcppExport SEXP _CVXR_LinOp__set_dense_data(SEXP xpSEXP, SEXP denseMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type denseMat(denseMatSEXP);
    LinOp__set_dense_data(xp, denseMat);
    return R_NilValue;
END_RCPP
}
// LinOp__get_size
std::vector<int> LinOp__get_size(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_size(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_size(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_size
void LinOp__set_size(SEXP xp, Rcpp::IntegerVector value);
RcppExport SEXP _CVXR_LinOp__set_size(SEXP xpSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type value(valueSEXP);
    LinOp__set_size(xp, value);
    return R_NilValue;
END_RCPP
}
// LinOp__args_push_back
void LinOp__args_push_back(SEXP xp, SEXP yp);
RcppExport SEXP _CVXR_LinOp__args_push_back(SEXP xpSEXP, SEXP ypSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yp(ypSEXP);
    LinOp__args_push_back(xp, yp);
    return R_NilValue;
END_RCPP
}
// LinOp__size_push_back
void LinOp__size_push_back(SEXP xp, int intVal);
RcppExport SEXP _CVXR_LinOp__size_push_back(SEXP xpSEXP, SEXP intValSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type intVal(intValSEXP);
    LinOp__size_push_back(xp, intVal);
    return R_NilValue;
END_RCPP
}
// LinOp__set_type
void LinOp__set_type(SEXP xp, int typeValue);
RcppExport SEXP _CVXR_LinOp__set_type(SEXP xpSEXP, SEXP typeValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type typeValue(typeValueSEXP);
    LinOp__set_type(xp, typeValue);
    return R_NilValue;
END_RCPP
}
// LinOp__get_type
int LinOp__get_type(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_type(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_type(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__slice_push_back
void LinOp__slice_push_back(SEXP xp, std::vector<int> intVec);
RcppExport SEXP _CVXR_LinOp__slice_push_back(SEXP xpSEXP, SEXP intVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type intVec(intVecSEXP);
    LinOp__slice_push_back(xp, intVec);
    return R_NilValue;
END_RCPP
}
// LinOp__get_slice
std::vector<std::vector<int> > LinOp__get_slice(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_slice(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_slice(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_slice
void LinOp__set_slice(SEXP xp, std::vector<std::vector<int> > value);
RcppExport SEXP _CVXR_LinOp__set_slice(SEXP xpSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type value(valueSEXP);
    LinOp__set_slice(xp, value);
    return R_NilValue;
END_RCPP
}
// LinOp__get_id
std::string LinOp__get_id(SEXP xp);
RcppExport SEXP _CVXR_LinOp__get_id(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_id(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOpVector__new
SEXP LinOpVector__new();
RcppExport SEXP _CVXR_LinOpVector__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LinOpVector__new());
    return rcpp_result_gen;
END_RCPP
}
// LinOpVector__push_back
void LinOpVector__push_back(SEXP xp, SEXP yp);
RcppExport SEXP _CVXR_LinOpVector__push_back(SEXP xpSEXP, SEXP ypSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yp(ypSEXP);
    LinOpVector__push_back(xp, yp);
    return R_NilValue;
END_RCPP
}
// LinOp_at_index
SEXP LinOp_at_index(SEXP lvec, int i);
RcppExport SEXP _CVXR_LinOp_at_index(SEXP lvecSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lvec(lvecSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp_at_index(lvec, i));
    return rcpp_result_gen;
END_RCPP
}
// ConstLinOpVector__new
SEXP ConstLinOpVector__new();
RcppExport SEXP _CVXR_ConstLinOpVector__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ConstLinOpVector__new());
    return rcpp_result_gen;
END_RCPP
}
// ConstLinOpVector__push_back
void ConstLinOpVector__push_back(SEXP xp, SEXP yp);
RcppExport SEXP _CVXR_ConstLinOpVector__push_back(SEXP xpSEXP, SEXP ypSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yp(ypSEXP);
    ConstLinOpVector__push_back(xp, yp);
    return R_NilValue;
END_RCPP
}
// ConstLinOp_at_index
SEXP ConstLinOp_at_index(SEXP lvec, int i);
RcppExport SEXP _CVXR_ConstLinOp_at_index(SEXP lvecSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lvec(lvecSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ConstLinOp_at_index(lvec, i));
    return rcpp_result_gen;
END_RCPP
}
// build_matrix_0
SEXP build_matrix_0(SEXP xp, Rcpp::IntegerVector v);
RcppExport SEXP _CVXR_build_matrix_0(SEXP xpSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(build_matrix_0(xp, v));
    return rcpp_result_gen;
END_RCPP
}
// build_matrix_1
SEXP build_matrix_1(SEXP xp, Rcpp::IntegerVector v1, Rcpp::IntegerVector v2);
RcppExport SEXP _CVXR_build_matrix_1(SEXP xpSEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(build_matrix_1(xp, v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_convolve
Rcpp::NumericVector cpp_convolve(Rcpp::NumericVector xa, Rcpp::NumericVector xb);
RcppExport SEXP _CVXR_cpp_convolve(SEXP xaSEXP, SEXP xbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xa(xaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xb(xbSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_convolve(xa, xb));
    return rcpp_result_gen;
END_RCPP
}
// multiply_dgCMatrix_vector
void multiply_dgCMatrix_vector(S4 A, NumericVector c_part);
RcppExport SEXP _CVXR_multiply_dgCMatrix_vector(SEXP ASEXP, SEXP c_partSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_part(c_partSEXP);
    multiply_dgCMatrix_vector(A, c_part);
    return R_NilValue;
END_RCPP
}
// sweep_in_place
void sweep_in_place(Rcpp::NumericMatrix P, Rcpp::NumericVector c_part);
RcppExport SEXP _CVXR_sweep_in_place(SEXP PSEXP, SEXP c_partSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_part(c_partSEXP);
    sweep_in_place(P, c_part);
    return R_NilValue;
END_RCPP
}
// upper_tri_to_full
Eigen::SparseMatrix<double> upper_tri_to_full(int n);
RcppExport SEXP _CVXR_upper_tri_to_full(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_tri_to_full(n));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__new
SEXP ProblemData__new();
RcppExport SEXP _CVXR_ProblemData__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ProblemData__new());
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__get_vec_idx
int ProblemData__get_vec_idx(SEXP xp);
RcppExport SEXP _CVXR_ProblemData__get_vec_idx(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_vec_idx(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_vec_idx
void ProblemData__set_vec_idx(SEXP xp, int idx);
RcppExport SEXP _CVXR_ProblemData__set_vec_idx(SEXP xpSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    ProblemData__set_vec_idx(xp, idx);
    return R_NilValue;
END_RCPP
}
// ProblemData__get_param_id
int ProblemData__get_param_id(SEXP xp);
RcppExport SEXP _CVXR_ProblemData__get_param_id(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_param_id(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_param_id
void ProblemData__set_param_id(SEXP xp, int idx);
RcppExport SEXP _CVXR_ProblemData__set_param_id(SEXP xpSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    ProblemData__set_param_id(xp, idx);
    return R_NilValue;
END_RCPP
}
// ProblemData__getLen
std::vector<double> ProblemData__getLen(SEXP xp);
RcppExport SEXP _CVXR_ProblemData__getLen(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__getLen(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__get_V
Rcpp::NumericVector ProblemData__get_V(SEXP xp, int num_values);
RcppExport SEXP _CVXR_ProblemData__get_V(SEXP xpSEXP, SEXP num_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type num_values(num_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_V(xp, num_values));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__get_I
Rcpp::IntVector ProblemData__get_I(SEXP xp, int num_values);
RcppExport SEXP _CVXR_ProblemData__get_I(SEXP xpSEXP, SEXP num_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type num_values(num_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_I(xp, num_values));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__get_J
Rcpp::IntVector ProblemData__get_J(SEXP xp, int num_values);
RcppExport SEXP _CVXR_ProblemData__get_J(SEXP xpSEXP, SEXP num_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type num_values(num_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_J(xp, num_values));
    return rcpp_result_gen;
END_RCPP
}
// build_matrix_0
SEXP build_matrix_0(SEXP xp, int var_length, Rcpp::IntegerVector idc, Rcpp::IntegerVector psize, int num_threads);
RcppExport SEXP _CVXR_build_matrix_0(SEXP xpSEXP, SEXP var_lengthSEXP, SEXP idcSEXP, SEXP psizeSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type var_length(var_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idc(idcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type psize(psizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_matrix_0(xp, var_length, idc, psize, num_threads));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _CVXR_LinOp__data_has_been_set(SEXP);
RcppExport SEXP _CVXR_LinOp__get_args(SEXP);
RcppExport SEXP _CVXR_LinOp__get_data_ndim(SEXP);
RcppExport SEXP _CVXR_LinOp__get_dim(SEXP);
RcppExport SEXP _CVXR_LinOp__get_linOp_data(SEXP);
RcppExport SEXP _CVXR_LinOp__is_sparse(SEXP);
RcppExport SEXP _CVXR_LinOp__push_back_slice(SEXP, SEXP);
RcppExport SEXP _CVXR_LinOp__set_data_ndim(SEXP, SEXP);
RcppExport SEXP _CVXR_LinOp__set_linOp_data(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__get_const_to_row(SEXP);
RcppExport SEXP _CVXR_ProblemData__get_const_vec(SEXP);
RcppExport SEXP _CVXR_ProblemData__get_id_to_col(SEXP);
RcppExport SEXP _CVXR_ProblemData__set_const_to_row(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__set_const_vec(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__set_I(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__set_id_to_col(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__set_J(SEXP, SEXP);
RcppExport SEXP _CVXR_ProblemData__set_V(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_CVXR_LinOp__new", (DL_FUNC) &_CVXR_LinOp__new, 0},
    {"_CVXR_LinOp__get_sparse", (DL_FUNC) &_CVXR_LinOp__get_sparse, 1},
    {"_CVXR_LinOp__set_sparse", (DL_FUNC) &_CVXR_LinOp__set_sparse, 2},
    {"_CVXR_LinOp__get_sparse_data", (DL_FUNC) &_CVXR_LinOp__get_sparse_data, 1},
    {"_CVXR_LinOp__set_sparse_data", (DL_FUNC) &_CVXR_LinOp__set_sparse_data, 2},
    {"_CVXR_LinOp__get_dense_data", (DL_FUNC) &_CVXR_LinOp__get_dense_data, 1},
    {"_CVXR_LinOp__set_dense_data", (DL_FUNC) &_CVXR_LinOp__set_dense_data, 2},
    {"_CVXR_LinOp__get_size", (DL_FUNC) &_CVXR_LinOp__get_size, 1},
    {"_CVXR_LinOp__set_size", (DL_FUNC) &_CVXR_LinOp__set_size, 2},
    {"_CVXR_LinOp__args_push_back", (DL_FUNC) &_CVXR_LinOp__args_push_back, 2},
    {"_CVXR_LinOp__size_push_back", (DL_FUNC) &_CVXR_LinOp__size_push_back, 2},
    {"_CVXR_LinOp__set_type", (DL_FUNC) &_CVXR_LinOp__set_type, 2},
    {"_CVXR_LinOp__get_type", (DL_FUNC) &_CVXR_LinOp__get_type, 1},
    {"_CVXR_LinOp__slice_push_back", (DL_FUNC) &_CVXR_LinOp__slice_push_back, 2},
    {"_CVXR_LinOp__get_slice", (DL_FUNC) &_CVXR_LinOp__get_slice, 1},
    {"_CVXR_LinOp__set_slice", (DL_FUNC) &_CVXR_LinOp__set_slice, 2},
    {"_CVXR_LinOp__get_id", (DL_FUNC) &_CVXR_LinOp__get_id, 1},
    {"_CVXR_LinOpVector__new", (DL_FUNC) &_CVXR_LinOpVector__new, 0},
    {"_CVXR_LinOpVector__push_back", (DL_FUNC) &_CVXR_LinOpVector__push_back, 2},
    {"_CVXR_LinOp_at_index", (DL_FUNC) &_CVXR_LinOp_at_index, 2},
    {"_CVXR_ConstLinOpVector__new", (DL_FUNC) &_CVXR_ConstLinOpVector__new, 0},
    {"_CVXR_ConstLinOpVector__push_back", (DL_FUNC) &_CVXR_ConstLinOpVector__push_back, 2},
    {"_CVXR_ConstLinOp_at_index", (DL_FUNC) &_CVXR_ConstLinOp_at_index, 2},
    {"_CVXR_build_matrix_0", (DL_FUNC) &_CVXR_build_matrix_0, 2},
    {"_CVXR_build_matrix_1", (DL_FUNC) &_CVXR_build_matrix_1, 3},
    {"_CVXR_cpp_convolve", (DL_FUNC) &_CVXR_cpp_convolve, 2},
    {"_CVXR_multiply_dgCMatrix_vector", (DL_FUNC) &_CVXR_multiply_dgCMatrix_vector, 2},
    {"_CVXR_sweep_in_place", (DL_FUNC) &_CVXR_sweep_in_place, 2},
    {"_CVXR_upper_tri_to_full", (DL_FUNC) &_CVXR_upper_tri_to_full, 1},
    {"_CVXR_ProblemData__new", (DL_FUNC) &_CVXR_ProblemData__new, 0},
    {"_CVXR_ProblemData__get_vec_idx", (DL_FUNC) &_CVXR_ProblemData__get_vec_idx, 1},
    {"_CVXR_ProblemData__set_vec_idx", (DL_FUNC) &_CVXR_ProblemData__set_vec_idx, 2},
    {"_CVXR_ProblemData__get_param_id", (DL_FUNC) &_CVXR_ProblemData__get_param_id, 1},
    {"_CVXR_ProblemData__set_param_id", (DL_FUNC) &_CVXR_ProblemData__set_param_id, 2},
    {"_CVXR_ProblemData__getLen", (DL_FUNC) &_CVXR_ProblemData__getLen, 1},
    {"_CVXR_ProblemData__get_V", (DL_FUNC) &_CVXR_ProblemData__get_V, 2},
    {"_CVXR_ProblemData__get_I", (DL_FUNC) &_CVXR_ProblemData__get_I, 2},
    {"_CVXR_ProblemData__get_J", (DL_FUNC) &_CVXR_ProblemData__get_J, 2},
    {"_CVXR_build_matrix_0", (DL_FUNC) &_CVXR_build_matrix_0, 5},
    {"_CVXR_LinOp__data_has_been_set",      (DL_FUNC) &_CVXR_LinOp__data_has_been_set,      1},
    {"_CVXR_LinOp__get_args",               (DL_FUNC) &_CVXR_LinOp__get_args,               1},
    {"_CVXR_LinOp__get_data_ndim",          (DL_FUNC) &_CVXR_LinOp__get_data_ndim,          1},
    {"_CVXR_LinOp__get_dim",                (DL_FUNC) &_CVXR_LinOp__get_dim,                1},
    {"_CVXR_LinOp__get_linOp_data",         (DL_FUNC) &_CVXR_LinOp__get_linOp_data,         1},
    {"_CVXR_LinOp__is_sparse",              (DL_FUNC) &_CVXR_LinOp__is_sparse,              1},
    {"_CVXR_LinOp__push_back_slice",        (DL_FUNC) &_CVXR_LinOp__push_back_slice,        2},
    {"_CVXR_LinOp__set_data_ndim",          (DL_FUNC) &_CVXR_LinOp__set_data_ndim,          2},
    {"_CVXR_LinOp__set_linOp_data",         (DL_FUNC) &_CVXR_LinOp__set_linOp_data,         2},
    {"_CVXR_ProblemData__get_const_to_row", (DL_FUNC) &_CVXR_ProblemData__get_const_to_row, 1},
    {"_CVXR_ProblemData__get_const_vec",    (DL_FUNC) &_CVXR_ProblemData__get_const_vec,    1},
    {"_CVXR_ProblemData__get_id_to_col",    (DL_FUNC) &_CVXR_ProblemData__get_id_to_col,    1},
    {"_CVXR_ProblemData__set_const_to_row", (DL_FUNC) &_CVXR_ProblemData__set_const_to_row, 2},
    {"_CVXR_ProblemData__set_const_vec",    (DL_FUNC) &_CVXR_ProblemData__set_const_vec,    2},
    {"_CVXR_ProblemData__set_I",            (DL_FUNC) &_CVXR_ProblemData__set_I,            2},
    {"_CVXR_ProblemData__set_id_to_col",    (DL_FUNC) &_CVXR_ProblemData__set_id_to_col,    2},
    {"_CVXR_ProblemData__set_J",            (DL_FUNC) &_CVXR_ProblemData__set_J,            2},
    {"_CVXR_ProblemData__set_V",            (DL_FUNC) &_CVXR_ProblemData__set_V,            2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CVXR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
